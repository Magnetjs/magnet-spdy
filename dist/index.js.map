{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAI,MAAM,6BAAG,OAAH,EAAN;;IAEiB;;;;;;;;;;;;;;;YAKX,MAQA,KAkBE,KACA;;;;;;AA9BR,qBAAK,YAAL,GAAoB,qCAAqB,KAAK,MAAL,CAAY,MAAZ,EAAoB,KAAK,MAAL,CAAY,IAAZ,CAA7D;;AAEA,oBAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAA9B,EAAsC;AACpC,gCADoC;;;AAGxC,sBAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,OAA9B,EAAuC;AACzC,2BAAM,6BAAG,OAAH,EAAN,CADyC;mBAA3C,MAEO;AACL,wDADK;mBAFP;;AAMI,wBAAM,KAAI,MAAJ,CAAW;AACnB,+BAAW,KAAK,YAAL,CAAkB,WAAlB,CAA8B,SAA9B;AACX,yCAAqB,6BAAC,QAAD,EAAW,EAAX,EAAkB;;;AAErC,yBAAG,IAAH,EAAS;AACP,iCAAS,CAAC,QAAD,CAAT;AACA,+BAAO,OAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B;AACP,kCAAU,IAAV;uBAHF,EAFqC;qBAAlB;mBAFb;;;;;AAT8B;AAwBxC,uBAAK,GAAL,CAAS,MAAT,GAAkB,eAAM,YAAN,CAAmB,IAAI,YAAJ,EAAkB,KAAI,mBAAJ,CAAwB,GAAxB,EAA6B,KAAK,GAAL,CAAS,WAAT,CAAqB,QAArB,EAA7B,CAArC,CAAlB;;AAxBwC,sBA0BpC,KAAK,YAAL,CAAkB,cAAlB,CAAiC,MAAjC,EAAyC;AACvC,0BAAM,oBADiC;AAEvC,2CAFuC;;AAG3C,wBAAI,KAAK,YAAL,CAAkB,YAAlB,CAA+B,OAA/B,EAAwC;AAC1C,sCAAgB,IAAI,GAAJ,CACd,0BACE,yBAAa,KAAK,YAAL,CAAkB,YAAlB,CAA+B,OAA/B,CADf,CADc,CAAhB,CAD0C;qBAA5C;AAOA,yBAAK,GAAL,CAAS,cAAT,GAA0B,eAAK,YAAL,CAAkB,KAAI,mBAAJ,CAAwB,GAAxB,EAA6B,cAAc,QAAd,EAA7B,CAAlB,CAA1B,CAV2C;mBAA7C;iBA1BF,MAsCO;AACL,uBAAK,GAAL,CAAS,MAAT,GAAkB,eAAM,YAAN,CAAmB,KAAK,YAAL,CAAkB,GAAlB,EAAuB,KAAK,GAAL,CAAS,WAAT,CAAqB,QAArB,EAA1C,CAAlB,CADK;iBAtCP;;;;;;;;;;;;;;;;;;;;;;;;;YA+CI;;;;;sBAAM;;AACV,qBAAK,GAAL,CAAS,QAAT,GAAoB,KAAK,GAAL,CAAS,MAAT,CAAgB,MAAhB,CAAuB,KAAK,YAAL,CAAkB,IAAlB,EAAwB,YAAW;AAC5E,sBAAI,GAAJ,CAAQ,IAAR,6BAAuC,KAAK,OAAL,GAAe,IAAf,CAAvC,CAD4E;iBAAX,CAAnE;;AAIA,oBAAI,KAAK,YAAL,CAAkB,cAAlB,CAAiC,MAAjC,EAAyC;AAC3C,uBAAK,GAAL,CAAS,sBAAT,GAAkC,KAAK,GAAL,CAAS,cAAT,CAAwB,MAAxB,CAA+B,KAAK,YAAL,CAAkB,cAAlB,CAAiC,IAAjC,EAAuC,YAAW;AACjH,wBAAI,GAAJ,CAAQ,IAAR,wCAAkD,KAAK,OAAL,GAAe,IAAf,cAAlD,EADiH;mBAAX,CAAxG,CAD2C;iBAA7C;;;;;;;;;;;;;;;;;;SAxDiB","file":"index.js","sourcesContent":["import Base from 'magnet-core/dist/base';\nimport https from 'spdy';\nimport http from 'http';\nimport Koa from 'koa';\nimport convert from 'koa-convert';\nimport enforceHttps from 'koa-sslify';\nimport le from 'letsencrypt-express';\nimport merge from 'lodash/merge';\nimport defaultConfig from './config/spdy'\n\nlet LEX = le.testing();\n\nexport default class SPDY extends Base {\n  async setup() {\n    this.serverConfig = merge(defaultConfig, this.config.server, this.config.spdy);\n\n    if (this.serverConfig.letsEncrypt.enable) {\n      let LEX;\n\n      if (this.serverConfig.letsEncrypt.testing) {\n        LEX = le.testing();\n      } else {\n        LEX = le;\n      }\n\n      let lex = LEX.create({\n        configDir: this.serverConfig.letsEncrypt.configDir,\n        approveRegistration: (hostname, cb) => { // leave `null` to disable automatic registration\n          // Note: this is the place to check your database to get the user associated with this domain\n          cb(null, {\n            domains: [hostname],\n            email: this.serverConfig.letsEncrypt.email,\n            agreeTos: true\n          });\n        }\n      });\n\n      /**\n      * Create server\n      */\n      this.app.server = https.createServer(lex.httpsOptions, LEX.createAcmeResponder(lex, this.app.application.callback()));\n      // this.app.server = https.createServer(Object.assign(lex.httpsOptions, this.serverConfig), LEX.createAcmeResponder(lex, this.app.application.callback()));\n      if (this.serverConfig.redirectServer.enable) {\n        let koa = new Koa();\n        let redirectHttps;\n        if (this.serverConfig.enforceHttps.options) {\n          redirectHttps = koa.use(\n            convert(\n              enforceHttps(this.serverConfig.enforceHttps.options)\n            )\n          );\n        }\n        this.app.redirectServer = http.createServer(LEX.createAcmeResponder(lex, redirectHttps.callback()));\n      }\n    } else {\n      this.app.server = https.createServer(this.serverConfig.ssl, this.app.application.callback());\n    }\n  }\n\n  /**\n   * Start SPDY server\n   */\n  async start() {\n    let ctx = this;\n    this.app.runnable = this.app.server.listen(this.serverConfig.port, function() {\n      ctx.log.info(`Server started at port ${this.address().port}`);\n    });\n\n    if (this.serverConfig.redirectServer.enable) {\n      this.app.runnableRedirectServer = this.app.redirectServer.listen(this.serverConfig.redirectServer.port, function() {\n        ctx.log.info(`Redirecting insecure traffic from ${this.address().port} to https`);\n      });\n    }\n  }\n}\n"]}