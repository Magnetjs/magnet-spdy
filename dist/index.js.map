{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqB,I;YAAA,I;;WAAA,I;0BAAA,I;;kEAAA,I;;;eAAA,I;;;;;;YAEb,Y,EACA,S,EAIE,G,EAQA,G;;;;;AAbF,4B;AACA,yB;;AACJ,qBAAK,YAAL,GAAoB,qCAAqB,KAAK,MAAL,CAAY,MAAjC,EAAyC,KAAK,MAAL,CAAY,IAArD,CAApB;;AAEA,oBAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAAlC,EAA0C;AACpC,qBADoC;;;AAGxC,sBAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,OAAlC,EAA2C;AACzC,0BAAM,6BAAG,OAAH,EAAN;AACD,mBAFD,MAEO;AACL;AACD;;AAEG,qBAToC,GAS9B,IAAI,MAAJ,CAAW;AACnB,+BAAW,KAAK,YAAL,CAAkB,WAAlB,CAA8B,SADtB;AAEnB,yCAAqB,6BAAC,QAAD,EAAW,EAAX,EAAkB;;;AAErC,yBAAG,IAAH,EAAS;AACP,iCAAS,CAAC,QAAD,CADF;AAEP,+BAAO,OAAK,YAAL,CAAkB,WAAlB,CAA8B,KAF9B;AAGP,kCAAU;AAHH,uBAAT;AAKD;AATkB,mBAAX,CAT8B;;;AAqBxC,iCAAe,IAAI,YAAnB;AACA,0BAAQ,GAAR,CAAY,YAAZ;AACA,8BAAY,IAAI,mBAAJ,CAAwB,GAAxB,EAA6B,KAAK,GAAL,CAAS,WAAT,CAAqB,QAArB,EAA7B,CAAZ;AACD,iBAxBD,MAwBO;AACL,iCAAe,KAAK,YAApB;AACA,8BAAY,KAAK,GAAL,CAAS,WAAT,CAAqB,QAArB,EAAZ;AACD;;;;;AAKD,qBAAK,GAAL,CAAS,MAAT,GAAkB,eAAM,YAAN,CAAmB,YAAnB,EAAiC,SAAjC,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;YAOI,G;;;;;AAAA,mB,GAAM,I;;AACV,qBAAK,GAAL,CAAS,QAAT,GAAoB,KAAK,GAAL,CAAS,MAAT,CAAgB,MAAhB,CAAuB,KAAK,YAAL,CAAkB,IAAzC,EAA+C,YAAW;AAC5E,sBAAI,GAAJ,CAAQ,IAAR,6BAAuC,KAAK,OAAL,GAAe,IAAtD;AACD,iBAFmB,CAApB;;;;;;;;;;;;;;;;;;SA9CiB,I;;;kBAAA,I","file":"index.js","sourcesContent":["import Base from 'magnet-core/dist/base';\nimport https from 'spdy';\nimport le from 'letsencrypt-express';\nimport merge from 'lodash/merge';\nimport defaultConfig from './config/spdy'\n\nexport default class SPDY extends Base {\n  async setup() {\n    let httpsOptions;\n    let responder;\n    this.serverConfig = merge(defaultConfig, this.config.server, this.config.spdy);\n\n    if (this.serverConfig.letsEncrypt.enable) {\n      let LEX;\n\n      if (this.serverConfig.letsEncrypt.testing) {\n        LEX = le.testing();\n      } else {\n        LEX = le;\n      }\n\n      let lex = LEX.create({\n        configDir: this.serverConfig.letsEncrypt.configDir,\n        approveRegistration: (hostname, cb) => { // leave `null` to disable automatic registration\n          // Note: this is the place to check your database to get the user associated with this domain\n          cb(null, {\n            domains: [hostname],\n            email: this.serverConfig.letsEncrypt.email,\n            agreeTos: true\n          });\n        }\n      });\n\n      httpsOptions = lex.httpsOptions;\n      console.log(httpsOptions);\n      responder = LEX.createAcmeResponder(lex, this.app.application.callback());\n    } else {\n      httpsOptions = this.serverConfig;\n      responder = this.app.application.callback();\n    }\n\n    /**\n    * Create server\n    */\n    this.app.server = https.createServer(httpsOptions, responder);\n  }\n\n  /**\n   * Start SPDY server\n   */\n  async start() {\n    let ctx = this;\n    this.app.runnable = this.app.server.listen(this.serverConfig.port, function() {\n      ctx.log.info(`Server started at port ${this.address().port}`);\n    });\n  }\n}\n"]}